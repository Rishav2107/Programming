You are given N, and for a given N x N chessboard, find a way to place N queens such that no queen can attack any other queen on the chess board. A queen can be killed when it lies in the same row, or same column, or the same diagonal of any of the other queens. You have to print all such configurations.
Note: Don't print anything if there isn't any valid configuration.
Input Format:
The first line of input contains an integer, that denotes the value of N.     
Sample Input 1:
4
Sample Output 1 :
0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 
0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 



#include<bits/stdc++.h>
using namespace std;
int board[11][11];
void printQueen(int n)
{
    
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++)
        {
            cout << board[i][j] << " ";
        }
      
    }
      cout<<endl;
}
bool canPlace(int row,int col,int n)
{

    for(int i=row-1;i>=0;i--)
    {
        if(board[i][col]==1)
            return false;
    }
    for(int i=row-1,j=col+1;i>=0 && j<n;i--,j++)
    {
        if(board[i][j]==1)
            return false;
    }
    for(int i=row-1,j=col-1;i>=0 && j>=0;i--,j--)
    {
        if(board[i][j]==1)
            return false;
    }
    return true;
    
}
void nQueen(int row,int n)
{
    if(row == n)
    {
        printQueen(n);
        return;
    }
  
         for(int j=0;j<n;j++)
  		  {

           bool safe=canPlace(row,j,n);  
        		if(safe)
                {
                
                    board[row][j]=1;
                    nQueen(row+1,n);
                    board[row][j]=0;
                }
         }
    return; 
    
}
void placeNQueens(int n)
{
      memset(board,0,11*11*sizeof(int));

  nQueen(0,n);
}
int main(){
    
    // write your code here
    int n;
    cin>>n;
      placeNQueens(n);
   
    return 0;
}
